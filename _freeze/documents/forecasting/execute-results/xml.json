{
  "hash": "f4a8b811adcd91d887f178f34150ec33",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.callout-note} \nIn this section we use ARIMA model to provide a long-term forecast of the company stock price.\n:::\n\n### **Long-Term Financial Forecast for the Company Using ARIMA Model**\n\nLong-term financial forecasting, like all social forecasting, is an incredibly fraught undertaking due to many different reasons (see, for example, [@cerqueira8ReasonsWhy2022] and [@ForecastingPredictiveAnalytics]). Luckily, many tools are available for us to experiment with.\n\nWe've already done some simple short-term forecasting in our \"Technical Analysis\" section using **SMA** and **Bollinger Bands**. We've also accessed volatility by calculating **Beta** value and estimated risk/return using **Annualized Sharpe Ratio**, which might help us in medium-term forecasting. Now we will try using advanced **ARIMA** (Auto-Regressive Integrated Moving Averages) to predict stock prices for the next 6 months and for the next year.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nlibrary(tidyquant)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyquant packages ─────────────────────── tidyquant 1.0.10 ──\n✔ PerformanceAnalytics 2.0.8      ✔ TTR                  0.24.4\n✔ quantmod             0.4.26     ✔ xts                  0.14.1\n── Conflicts ────────────────────────────────────────── tidyquant_conflicts() ──\n✖ zoo::as.Date()                 masks base::as.Date()\n✖ zoo::as.Date.numeric()         masks base::as.Date.numeric()\n✖ PerformanceAnalytics::legend() masks graphics::legend()\n✖ quantmod::summary()            masks base::summary()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nlibrary(forecast)\nlibrary(ggplot2)\nlibrary(timetk)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'timetk'\n\nThe following object is masked from 'package:tidyquant':\n\n    FANG\n\nThe following object is masked from 'package:base':\n\n    %||%\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: 'dplyr'\n\nThe following objects are masked from 'package:xts':\n\n    first, last\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nclx_stock <- tq_get(\"CLX\", \n                   get = \"stock.prices\", \n                   from = \"2020-01-01\", \n                   to = \"2025-02-01\") |>\n  select(date, close) |>\n  arrange(date)\n\nclx_price_ts <- tk_ts(clx_stock, start = 2020, \n              frequency = 252)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Non-numeric columns being dropped: date\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\narima_model <- auto.arima(clx_price_ts)\n\narima_forecast <- forecast(arima_model, h = 365/2)\n\nautoplot(arima_forecast) +\n  labs(title = \"CLX Stock Price Forecast 6 Months (ARIMA)\",\n    y = \"Price (USD)\",\n    x = \"Date\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](forecasting_files/figure-jats/unnamed-chunk-1-1.png)\n:::\n\n```{.r .cell-code}\n#| echo: true\narima_forecast <- forecast(arima_model, h = 365)\n\nautoplot(arima_forecast) +\n  labs(title = \"CLX Stock Price Forecast Year (ARIMA)\",\n       y = \"Price (USD)\",\n       x = \"Date\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](forecasting_files/figure-jats/unnamed-chunk-1-2.png)\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nWe can see the band for the future time periods representing possible price ranges and 2 confidence levels.\n\n### **Conclusion**\n\nWe can use advanced forecasting models (such as ARIMA) available in the R language to predict the stock price. The analysis shows a wide range of possible future prices, albeit without major ups or downs.\n",
    "supporting": [
      "forecasting_files/figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}