{
  "hash": "d9facfdbe8d537780da6c58c884799d9",
  "result": {
    "engine": "knitr",
    "markdown": "* What risks does it list on 10-k? Summarize.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Load libraries\nlibrary(tidyquant)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyquant packages ─────────────────────── tidyquant 1.0.10 ──\n✔ PerformanceAnalytics 2.0.8      ✔ TTR                  0.24.4\n✔ quantmod             0.4.26     ✔ xts                  0.14.1\n── Conflicts ────────────────────────────────────────── tidyquant_conflicts() ──\n✖ zoo::as.Date()                 masks base::as.Date()\n✖ zoo::as.Date.numeric()         masks base::as.Date.numeric()\n✖ PerformanceAnalytics::legend() masks graphics::legend()\n✖ quantmod::summary()            masks base::summary()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(forecast)\nlibrary(ggplot2)\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: 'dplyr'\n\nThe following objects are masked from 'package:xts':\n\n    first, last\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Get daily stock prices\nclx_stock <- tq_get(\"CLX\", \n                   get = \"stock.prices\", \n                   from = \"2019-01-01\", \n                   to = Sys.Date())\n\n# Get quarterly revenue (from Yahoo Finance)\n# clx_revenue <- tq_get(\"CLX\", \n#                      get = \"financials\", \n#                      type = \"income\", \n#                      period = \"quarterly\") %>%\n#   filter(category == \"Total Revenue\") %>%\n#   select(date, revenue = value)\n\n# Stock price time series (daily)\nclx_price_ts <- ts(clx_stock$adjusted, \n                  frequency = 365, \n                  start = c(year(min(clx_stock$date)), \n                            yday(min(clx_stock$date))))\n\n# Revenue time series (quarterly)\n# clx_revenue_ts <- ts(clx_revenue$revenue, \n#                     frequency = 4, \n#                     start = c(2019, 1))\n\n# Fit ARIMA model\narima_model <- auto.arima(clx_price_ts)\n\n# Forecast 1.5 years (547 days)\narima_forecast <- forecast(arima_model, h = 547)\n\n# Plot results\nautoplot(arima_forecast) +\n  labs(title = \"CLX Stock Price Forecast (ARIMA)\",\n       y = \"Price (USD)\",\n       x = \"Date\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](forecasting_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code .hidden}\n# # Fit ETS model\n# ets_model <- ets(clx_revenue_ts)\n#\n# # Forecast 6 quarters (1.5 years)\n# ets_forecast <- forecast(ets_model, h = 6)\n#\n# # Plot results\n# autoplot(ets_forecast) +\n#   labs(title = \"CLX Quarterly Revenue Forecast (ETS)\",\n#        y = \"Revenue (Billions USD)\",\n#        x = \"Year\") +\n#   theme_minimal()\n#\n# # Stock price forecast data frame\n# stock_forecast_df <- data.frame(\n#   date = seq.Date(from = max(clx_stock$date), \n#                   by = \"day\", \n#                   length.out = 547),\n#   forecast = arima_forecast$mean,\n#   lower = arima_forecast$lower[, 2],\n#   upper = arima_forecast$upper[, 2]\n# )\n#\n# # Revenue forecast data frame\n# revenue_forecast_df <- data.frame(\n#   date = seq.Date(from = max(clx_revenue$date), \n#                   by = \"quarter\", \n#                   length.out = 6),\n#   forecast = ets_forecast$mean,\n#   lower = ets_forecast$lower[, 2],\n#   upper = ets_forecast$upper[, 2]\n# )\n#\n# # Plot stock price forecast\n# ggplot() +\n#   geom_line(data = clx_stock, aes(x = date, y = adjusted), color = \"black\") +\n#   geom_line(data = stock_forecast_df, aes(x = date, y = forecast), color = \"blue\") +\n#   geom_ribbon(data = stock_forecast_df, \n#               aes(x = date, ymin = lower, ymax = upper), \n#               fill = \"blue\", alpha = 0.2) +\n#   labs(title = \"CLX Stock Price Forecast (ARIMA)\",\n#        y = \"Price (USD)\",\n#        x = \"Date\") +\n#   theme_minimal()\n#\n# # Plot revenue forecast\n# ggplot() +\n#   geom_line(data = clx_revenue, aes(x = date, y = revenue), color = \"black\") +\n#   geom_line(data = revenue_forecast_df, aes(x = date, y = forecast), color = \"red\") +\n#   geom_ribbon(data = revenue_forecast_df, \n#               aes(x = date, ymin = lower, ymax = upper), \n#               fill = \"red\", alpha = 0.2) +\n#   labs(title = \"CLX Quarterly Revenue Forecast (ETS)\",\n#        y = \"Revenue (Billions USD)\",\n#        x = \"Date\") +\n#   theme_minimal()\n```\n:::\n",
    "supporting": [
      "forecasting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}