{
  "hash": "ebe820ab04709e830028b85983e6536f",
  "result": {
    "engine": "knitr",
    "markdown": "<!--\nCommon size analysis for fundamental analysis.\nLife cycle stage.\nROI for stock over a period of time.\nAnalyst's views and rating.\nclient.shwab.com\nEBITDA\nP/B ratio\nEV = Mcap + Debt\n-->\n\n::: {.callout-note}\nIn this section we will take a look at quantitative fundamental analysis tools provided by the \"tidyquant\" R language package [@danchoTidyquantTidyQuantitative2025] and use them to get key financial ratios of fundamental analysis for the Clorox company. This section is based on the following wonderful tutorial: @PerformanceAnalysisTidyquant\n:::\n\n#### **Basic Fundamental Analysis of the Clorox Company**\n\nFirst let's retrieve 5-year period returns from the prices adjusted for stock splits, both for Clorox and S&P500 as the baseline. Next, we combine both datasets (Clorox and S&P500 returns) using \"left-join\" on the \"date\" field. Using this dataset, we can retrieve all kind of fundamental metrics, such as **Alpha** (0.0008), **Beta** (0.414).\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nlibrary(tidyquant)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n── Attaching core tidyquant packages ─────────────────────── tidyquant 1.0.10 ──\n✔ PerformanceAnalytics 2.0.8      ✔ TTR                  0.24.4\n✔ quantmod             0.4.26     ✔ xts                  0.14.1── Conflicts ────────────────────────────────────────── tidyquant_conflicts() ──\n✖ purrr::%||%()                  masks base::%||%()\n✖ zoo::as.Date()                 masks base::as.Date()\n✖ zoo::as.Date.numeric()         masks base::as.Date.numeric()\n✖ dplyr::filter()                masks stats::filter()\n✖ xts::first()                   masks dplyr::first()\n✖ dplyr::lag()                   masks stats::lag()\n✖ xts::last()                    masks dplyr::last()\n✖ PerformanceAnalytics::legend() masks graphics::legend()\n✖ quantmod::summary()            masks base::summary()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nRa <- \"CLX\" |>\n    tq_get(get  = \"stock.prices\",\n           from = \"2020-01-01\",\n           to   = \"2025-02-01\") |>\n    group_by(symbol) |>\n    tq_transmute(select     = adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"monthly\", \n                 col_rename = \"Ra\")\n\n\nRb <- \"^GSPC\" |>\n    tq_get(get  = \"stock.prices\",\n           from = \"2020-01-01\",\n           to   = \"2025-02-01\") |>\n    tq_transmute(select     = adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"monthly\", \n                 col_rename = \"Rb\")\n\nRaRb <- left_join(Ra, Rb, by = c(\"date\" = \"date\"))\n\n\nRaRb_capm <- RaRb %>%\n    tq_performance(Ra = Ra, \n                   Rb = Rb, \n                   performance_fun = table.CAPM)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRegistered S3 method overwritten by 'robustbase':\n  method          from     \n  hatvalues.lmrob RobStatTM\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nRaRb_capm %>% select(symbol, Alpha, Beta) |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n# Groups:   symbol [1]\n  symbol  Alpha  Beta\n  <chr>   <dbl> <dbl>\n1 CLX    0.0008 0.414\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nWe can also get the **Annualized Sharpe Ratio and Returns**, **Types of Mean Return (Geometric, Arithmetic, etc.)**, **Kurtosis**, as well as **Maximum and Median Return** by following the similar steps (no need for the baseline this time).\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: true\nlibrary(tidyverse)\nlibrary(tidyquant)\n\nRa <- \"CLX\" |>\n    tq_get(get  = \"stock.prices\",\n           from = \"2020-01-01\",\n           to   = \"2025-02-01\") |>\n    group_by(symbol) |>\n    tq_transmute(select     = adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"monthly\", \n                 col_rename = \"Ra\")\n\nRa |>\n  tq_performance(Ra = Ra, Rb = NULL, performance_fun = table.AnnualizedReturns) |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n# Groups:   symbol [1]\n  symbol AnnualizedReturn `AnnualizedSharpe(Rf=0%)` AnnualizedStdDev\n  <chr>             <dbl>                     <dbl>            <dbl>\n1 CLX              0.0381                     0.153            0.249\n```\n\n\n:::\n\n```{.r .cell-code}\n#| echo: true\nRa |>\n  tq_performance(Ra = Ra, Rb = NULL, performance_fun = table.Stats) |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 17\n# Groups:   symbol [1]\n  symbol ArithmeticMean GeometricMean Kurtosis `LCLMean(0.95)` Maximum Median\n  <chr>           <dbl>         <dbl>    <dbl>           <dbl>   <dbl>  <dbl>\n1 CLX            0.0056        0.0031     1.20         -0.0128   0.218 0.0054\n# ℹ 10 more variables: Minimum <dbl>, NAs <dbl>, Observations <dbl>,\n#   Quartile1 <dbl>, Quartile3 <dbl>, SEMean <dbl>, Skewness <dbl>,\n#   Stdev <dbl>, `UCLMean(0.95)` <dbl>, Variance <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### **Conclusion**  \nWe can use the \"tidyquant\" R language package to perform fundamental analysis of the company and obtain all of the key financial ratios for such analysis. The analysis shows a company in recovery with strong fundamentals.\n",
    "supporting": [
      "fundamentals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}